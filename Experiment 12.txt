Write a program for page replacement policy using a) LRU b) FIFO c) Optimal.

Code:

import java.util.*;

public class PageReplacementPolicies {

    public static void fifo(int[] pages, int capacity) {
        Set<Integer> set = new HashSet<>();
        Queue<Integer> queue = new LinkedList<>();
        int pageFaults = 0;

        for (int page : pages) {
            if (!set.contains(page)) {
                if (set.size() == capacity) {
                    int removed = queue.poll();
                    set.remove(removed);
                }
                set.add(page);
                queue.add(page);
                pageFaults++;
            }
        }

        System.out.println("FIFO Page Faults: " + pageFaults);
    }

    public static void lru(int[] pages, int capacity) {
        Set<Integer> set = new HashSet<>();
        Map<Integer, Integer> lruIndex = new HashMap<>();
        int pageFaults = 0;

        for (int i = 0; i < pages.length; i++) {
            int page = pages[i];

            if (!set.contains(page)) {
                if (set.size() == capacity) {
                    int lru = Collections.min(lruIndex.entrySet(), Map.Entry.comparingByValue()).getKey();
                    set.remove(lru);
                    lruIndex.remove(lru);
                }
                set.add(page);
                pageFaults++;
            }

            lruIndex.put(page, i);
        }

        System.out.println("LRU Page Faults: " + pageFaults);
    }

    public static void optimal(int[] pages, int capacity) {
        Set<Integer> set = new HashSet<>();
        int pageFaults = 0;

        for (int i = 0; i < pages.length; i++) {
            int page = pages[i];

            if (!set.contains(page)) {
                if (set.size() == capacity) {
                    int farthest = -1;
                    int pageToReplace = -1;

                    for (int p : set) {
                        int nextUse = Integer.MAX_VALUE;
                        for (int j = i + 1; j < pages.length; j++) {
                            if (pages[j] == p) {
                                nextUse = j;
                                break;
                            }
                        }
                        if (nextUse > farthest) {
                            farthest = nextUse;
                            pageToReplace = p;
                        }
                    }

                    set.remove(pageToReplace);
                }
                set.add(page);
                pageFaults++;
            }
        }

        System.out.println("Optimal Page Faults: " + pageFaults);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the number of pages:");
        int n = scanner.nextInt();
        int[] pages = new int[n];

        System.out.println("Enter the page reference string:");
        for (int i = 0; i < n; i++) {
            pages[i] = scanner.nextInt();
        }

        System.out.println("Enter the capacity of the page frame:");
        int capacity = scanner.nextInt();

        System.out.println("\nPage Replacement Results:");
        fifo(pages, capacity);
        lru(pages, capacity);
        optimal(pages, capacity);

        scanner.close();
    }
}
